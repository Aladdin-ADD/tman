#!/usr/bin/env node

var fs = require('fs')
var path = require('path')
var glob = require('glob')
var program = require('commander')
var getOptions = require('./options')
var packageInfo = require('../package.json')
var cwd = process.cwd()

// Prefer the local installation of T-man
var tman = localTman(path.join(cwd, 'node_modules', 'tman')) || localTman(cwd) || require('..')
if (packageInfo.version !== tman.VERSION) {
  console.warn(tman.format.red('\nWarning: T-man version mismatch:', true))
  console.warn(tman.format.red(
    '  Global: v' + packageInfo.version + ', update: npm i -g tman', true))
  console.warn(tman.format.red(
    '  Local: v' + tman.VERSION + ', update: npm i tman@latest\n', true))
}

// options
program._name = tman.NAME
program
  .version('v' + tman.VERSION)
  .usage('[debug] [options] [files]')
  .option('-c, --color', 'force enabling of colors')
  .option('-C, --no-color', 'force disabling of colors')
  .option('-d, --debug', "enable node's debugger, synonym for node --debug")
  .option('-gc, --expose-gc', 'expose gc extension')
  .option('-r, --require <name>', 'require the given module')
  .option('-t, --timeout <ms>', 'set test-case timeout in milliseconds [2000]')
  .option('--debug-brk', "enable node's debugger breaking on the first line")
  .option('--es_staging', 'enable all staged features')
  .option('--globals <names>', 'allow the given comma-delimited global [names]')
  .option('--harmony<_classes,_generators,...>', 'all node --harmony* flags are available')
  .option('--icu-data-dir', 'include ICU data')
  .option('--no-sort', 'don\'t sort test files')
  .option('--no-timeout', 'disables timeouts, given implicitly with --debug')
  .option('--no-exit',
    'require a clean shutdown of the event loop: T-man will not call process.exit')
  .option('--opts <path>', 'specify opts path', 'test/tman.opts')
  .option('--perf-basic-prof', 'enable perf linux profiler (basic support)')
  .option('--preserve-symlinks', 'Instructs the module loader to preserve symbolic links when resolving and caching modules')
  .option('--throw-deprecation', 'throw an exception anytime a deprecated function is used')
  .option('--trace', 'trace function calls')
  .option('--trace-deprecation', 'show stack traces on deprecations')
  .option('--use_strict', 'enforce strict mode')

module.paths.push(cwd, path.join(cwd, 'node_modules'))
// -r, --require
var requires = []
program.on('require', function (name) {
  var stat = fsStat(name + '.js') || fsStat(name)
  if (stat) name = path.resolve(name)
  requires.push(name)
})
// --globals <names>
var globals = []
program.on('globals', function (val) {
  globals.push.apply(globals, parseList(val))
})

// If not already done, load mocha.opts
if (!process.env.LOADED_TMAN_OPTS) getOptions()
// parse args
program.parse(process.argv)
// --no-exit
tman.rootSuite.exit = program.exit
// --timeout
if (program.timeout === false) {
  tman.rootSuite.no_timeout = true
} else {
  tman.rootSuite.timeout(parseInt(program.timeout, 10) || 2000)
}

// requires
requires.forEach(function (mod) { require(mod) })

// register to global object
if (!globals.length) {
  globals.push('describe', 'suite', 'test', 'it', 'before', 'after', 'beforeEach', 'afterEach')
}
globals.forEach(function (name) {
  if (global[name]) throw new Error('"' + name + '" exists on global')
  if (!tman[name]) throw new Error('"' + name + '" not exists on tman')
  global[name] = tman[name]
})
global.tman = tman

if (!tman.env.TEST) tman.env.TEST = 'root'
if (!process.env.npm_execpath) {
  // can't exit when runing with npm. https://github.com/npm/npm/issues/4603
  process.once('SIGINT', function () {
    tman.abort()
    // force to exit in 3 seconds.
    setTimeout(function () { tman.exit(1) }, 3000)
  })
}

// files.
var files = []
var args = program.args
// default files to `test/*.{js,ts,coffee}`
if (!args.length) args.push(path.join('test', '*.{js,ts,coffee}'))
args.forEach(function (arg) {
  var result = []
  if (fsStat(arg) === 1) {
    files.push(arg)
    return
  }
  var filenames = glob.sync(arg)
  if (!filenames.length) filenames.push(arg + '.js')
  filenames.forEach(function (filename) {
    var stat = fsStat(filename)
    if (stat === 1) result.push(filename)
    else if (stat === 2) {
      result.push.apply(result, glob.sync(path.join(filename, '*.{js,ts,coffee}')))
    }
  })
  files.push.apply(files, result)
})

sortFiles(files)
// load tests
files.forEach(function (filePath) {
  require(path.resolve(filePath))
})
tman.tryRun()

function sortFiles (list) {
  if (program.sort !== false) {
    list.sort(function (a, b) {
      return (a.split(path.sep).length - b.split(path.sep).length) ||
        Number(a > b) || -Number(a < b)
    })
  }
  return list
}

function localTman (dirname) {
  var tmanId = path.sep + path.join('lib', 'tman.js')
  var file = path.join(dirname, 'lib', 'tman.js')
  if (file.slice(tmanId.length * -1) !== tmanId) return null
  if (fsStat(file) !== 1 || fsStat(path.join(dirname, 'bin', 'tman')) !== 1) return null
  return require(file)
}

// 0: unknown, 1: file, 2: directory
function fsStat (filePath) {
  try {
    var stat = fs.statSync(filePath)
    if (stat.isFile()) return 1
    else if (stat.isDirectory()) return 2
    else return 0
  } catch (e) {}
  return 0
}

// Parse list.
function parseList (str) {
  return str.replace(/\W/g, ' ').trim().split(/ +/)
}
