#!/usr/bin/env node

var fs = require('fs')
var path = require('path')
var glob = require('glob')
var program = require('commander')
var cwd = process.cwd()

var tman = null

// try load tman from local node_modules
try {
  tman = require(path.join(cwd, 'node_modules/tman'))
} catch (e) {}

if (!tman) {
  // try load tman from local path
  try {
    tman = require(cwd)
    if (tman.NAME !== 'tman' || typeof tman.run !== 'function') tman = null
  } catch (e) {}
}

if (!tman) tman = require('..')

// options
program._name = tman.NAME
program
  .version('v' + tman.VERSION)
  .usage('[options] [files]')
  .option('-r, --require <name>', 'require the given module')
  .option('-t, --timeout <ms>', 'set test-case timeout in milliseconds [2000]')
  .option('-c, --color', 'force enabling of colors')
  .option('-C, --no-color', 'force disabling of colors')
  .option('-d, --debug', "enable node's debugger, synonym for node --debug")
  .option('--no-timeout', 'disables timeouts, given implicitly with --debug')
  .option('--no-exit', 'require a clean shutdown of the event loop: T-man will not call process.exit')

module.paths.push(cwd, path.join(cwd, 'node_modules'))
// -r, --require
var requires = []
program.on('require', function (name) {
  var abs = exists(name) || exists(name + '.js')
  if (abs) name = path.resolve(name)
  requires.push(name)
})

// parse args
program.parse(process.argv)

// --timeout
if (program.timeout === false) {
  tman.rootSuite.no_timeout = true
} else {
  tman.rootSuite.timeout(parseInt(program.timeout, 10) || 0)
}

// requires
requires.forEach(function (mod) { require(mod) })

// files.
var files = []
var args = program.args
// default files to `test/*.js`
if (!args.length) args.push('test/*.js')
args.forEach(function (arg) {
  var abs = exists(arg) || exists(arg + '.js')
  if (abs) files.push(arg)
  else files.push.apply(files, glob.sync(arg))
})

// register to global object
;['describe', 'suite', 'test', 'it', 'before', 'after', 'beforeEach', 'afterEach', 'tman'].forEach(function (name) {
  if (global[name]) throw new Error(name + ' exists on global object')
  global[name] = tman[name]
})

// load tests
files.sort().forEach(function (filePath) {
  require(path.resolve(filePath))
})

if (!tman.isRun()) tman.run(!program.exit && function (err) { if (err) throw err })
process.on('SIGINT', function () { tman.rootSuite.abort = true })

function exists (filePath) {
  try {
    return !!fs.statSync(filePath)
  } catch (e) {}
  return false
}
