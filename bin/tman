#!/usr/bin/env node

var fs = require('fs')
var path = require('path')
var glob = require('glob')
var program = require('commander')
var cwd = process.cwd()

// Prefer the local installation of T-man
var tman = localTman(path.join(cwd, 'node_modules', 'tman')) || localTman(cwd) || require('..')

// options
program._name = tman.NAME
program
  .version('v' + tman.VERSION)
  .usage('[options] [files]')
  .option('-r, --require <name>', 'require the given module')
  .option('-t, --timeout <ms>', 'set test-case timeout in milliseconds [2000]')
  .option('-c, --color', 'force enabling of colors')
  .option('-C, --no-color', 'force disabling of colors')
  .option('--no-timeout', 'disables timeouts, given implicitly with --debug')
  .option('--no-exit', 'require a clean shutdown of the event loop: T-man will not call process.exit')

module.paths.push(cwd, path.join(cwd, 'node_modules'))
// -r, --require
var requires = []
program.on('require', function (name) {
  var stat = fsStat(name + '.js') || fsStat(name)
  if (stat) name = path.resolve(name)
  requires.push(name)
})

// parse args
program.parse(process.argv)

// --timeout
if (program.timeout === false) {
  tman.rootSuite.no_timeout = true
} else {
  tman.rootSuite.timeout(parseInt(program.timeout, 10) || 0)
}

// requires
requires.forEach(function (mod) { require(mod) })

// register to global object
;['describe', 'suite', 'test', 'it', 'before', 'after', 'beforeEach', 'afterEach', 'tman'].forEach(function (name) {
  if (global[name]) throw new Error('"' + name + '" exists on global object')
  global[name] = tman[name]
})
if (!tman.TEST) tman.TEST = 'root'
tman.rootSuite.exit = program.exit
process.on('SIGINT', function () { tman.rootSuite.abort = true })

// files.
var files = []
var args = program.args
// default files to `test/*.*`
if (!args.length) args.push('test')
args.forEach(function (arg) {
  var filenames = glob.sync(arg)
  if (!filenames.length) filenames.push(arg + '.js')
  filenames.forEach(function (filename) {
    var stat = fsStat(filename)
    if (stat === 2) files.push.apply(files, glob.sync(path.join(filename, '*.*')))
    else if (stat === 1) files.push(filename)
  })
})

// load tests
files.sort().forEach(function (filePath) {
  require(path.resolve(filePath))
})
tman.tryRun()

function localTman (dirname) {
  var tmanId = path.sep + path.join('lib', 'tman.js')
  var file = path.join(dirname, 'lib', 'tman.js')
  if (file.slice(tmanId.length * -1) !== tmanId) return null
  if (fsStat(file) !== 1 || fsStat(path.join(dirname, 'bin', 'tman')) !== 1) return null
  return require(file)
}

// 0: unknown, 1: file, 2: directory
function fsStat (filePath) {
  try {
    var stat = fs.statSync(filePath)
    if (stat.isFile()) return 1
    else if (stat.isDirectory()) return 2
    else return 0
  } catch (e) {}
  return 0
}
